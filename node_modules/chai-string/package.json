{
  "name": "chai-string",
  "version": "1.1.3",
  "keywords": [
    "chai",
    "testing",
    "string"
  ],
  "description": "strings comparison matchers for chai",
  "main": "chai-string.js",
  "scripts": {
    "test": "make test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/onechiporenko/chai-string.git"
  },
  "author": {
    "name": "Oleg Nechiporenko",
    "url": "https://github.com/onechiporenko"
  },
  "license": "MIT",
  "devDependencies": {
    "chai": "^1.9.1",
    "mocha": "~1.6.0",
    "nodemon": "~0.6.23"
  },
  "dependencies": {
    "chai": "^1.9.1"
  },
  "readme": "# chai-string\r\n\r\nMatchers for chai to help with common string comparison assertions.\r\n\r\n[![Build Status](https://travis-ci.org/onechiporenko/chai-string.png?branch=master)](https://travis-ci.org/onechiporenko/chai-string)\r\n[![Downloads](http://img.shields.io/npm/dm/chai-string.svg)](http://img.shields.io/npm/dm/chai-string.svg)\r\n\r\n## Usage\r\n\r\n### Browser\r\n\r\n```html\r\n<script src=\"chai.js\"></script>\r\n<script src=\"chai-string.js\"></script>\r\n```\r\n\r\n### Server\r\n\r\n```javascript\r\nvar chai = require('chai');\r\nchai.use(require('chai-string'));\r\n```\r\n\r\n## Assertions\r\n\r\n* startsWith/startWith\r\n* endsWith/endWith\r\n* equalIgnoreCase\r\n* equalIgnoreSpaces\r\n* singleLine\r\n* reverseOf\r\n* palindrome\r\n* entriesCount\r\n\r\nAll assertions are defined for both the BDD and TDD syntax but some aliases exist to make the assertions look good with both styles.\r\n\r\n```javascript\r\nvar d1 = 'abcdef',\r\n    d2 = 'abc';\r\n\r\nd1.should.startWith.d2\r\nexpect(d1).to.startsWith(d2)\r\nassert.startsWith(d1, d2)\r\n```\r\n\r\n### startsWith/startWith\r\n```javascript\r\nassert.startsWith('abcdef', 'abc');\r\nexpect('abcdef').to.startsWith('abc');\r\n'abcdef'.should.startWith('abc');\r\n```\r\n\r\n### endsWith/endWith\r\n```javascript\r\nassert.endsWith('abcdef', 'def');\r\nexpect('abcdef').to.endsWith('def');\r\n'abcdef'.should.endWith('def');\r\n```\r\n\r\n### equalIgnoreCase\r\n```javascript\r\nassert.equalIgnoreCase('abcdef', 'AbCdEf');\r\nexpect('abcdef').to.equalIgnoreCase('AbCdEf');\r\n```\r\n\r\n### equalIgnoreSpaces\r\n```javascript\r\nassert.equalIgnoreSpaces('abcdef', 'a\\nb\\tc\\r d  ef');\r\nexpect('abcdef').to.equalIgnoreSpaces('a\\nb\\tc\\r d  ef');\r\n```\r\n\r\n### singleLine\r\n```javascript\r\nassert.singleLine('abcdef');\r\nexpect('abcdef').to.be.singleLine();\r\n```\r\n\r\n### reverseOf\r\n```javascript\r\nassert.reverseOf('abcdef', 'fedcba');\r\nexpect('abcdef').to.be.reverseOf('fedcba');\r\n```\r\n\r\n### palindrome\r\n```javascript\r\nassert.palindrome('abccba');\r\nexpect('abccba').to.be.palindrome();\r\n```\r\n\r\n### entriesCount\r\n```javascript\r\nassert.entriesCount('abcabd', 'ab', 2);\r\nexpect('abcabd').to.have.entriesCount('ab', 2);\r\n```\r\n\r\n## Thanks\r\n\r\nThanks to the [chai-datetime](https://github.com/gaslight/chai-datetime) module for giving me an idea for how to structure and test a chai plugin.\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/onechiporenko/chai-string/issues"
  },
  "_id": "chai-string@1.1.3",
  "_from": "chai-string@1.1.3"
}
